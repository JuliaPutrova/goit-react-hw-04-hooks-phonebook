{"version":3,"sources":["App.styled.jsx","components/Container/Container.styled.jsx","components/Container/Container.js","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.js","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.js","components/Filter/Filter.styled.jsx","components/Filter/Filter.js","App.js","index.js"],"names":["ContactTitle","styled","h2","Title","p","MainContainer","div","Container","title","children","size","defaultProps","LabelName","label","Search","input","BtnContact","button","FormSt","form","ContactForm","onSubmit","useState","name","setName","number","setNumber","handleChange","e","currentTarget","value","reset","preventDefault","addNewContact","id","shortid","generate","type","onChange","pattern","required","ContactItem","li","BtnDelete","ContactList","contacts","deleteContact","map","onClick","FilteredName","FilteredInput","Filter","filteredValue","contactsArray","App","filter","setFilter","JSON","parse","localStorage","getItem","setContacts","useEffect","window","setItem","stringify","data","some","contact","toLowerCase","includes","alert","target","normalizedFilter","trim","onFilteredContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.56f95cd1.chunk.js","sourcesContent":["import styled from '@emotion/styled';\n\nexport const ContactTitle = styled.h2`\nmargin-top: 30px;\n`;","import styled from '@emotion/styled';\n\nexport const Title = styled.p`\nfont-size: 40px;\nfont-weight: 900;\nmargin: 20px 0px 30px 10px;\ndisplay: inline-flex;\n\n`;\n\nexport const MainContainer = styled.div`\nmargin-left: 20px;\n`;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { AiFillPhone } from 'react-icons/ai';\n\nimport { Title, MainContainer } from './Container.styled';\n\nfunction Container({ title, children }) {\n  return (\n    <MainContainer>\n      <AiFillPhone size={30} />\n      <Title>{title}</Title>\n      {children}\n    </MainContainer>\n  );\n}\n\nContainer.defaultProps = {\n  children: [],\n};\n\nContainer.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node,\n};\n\nexport default Container;\n","import styled from '@emotion/styled';\n\nexport const LabelName = styled.label`\ndisplay: block;\nmargin-right: 20px;\nmargin-bottom: 10px;\n`;\n\nexport const Search = styled.input`\ndisplay: block;\nmargin-top: 10px;\n`;\n\nexport const BtnContact = styled.button`\nfont-size: 10px;\nfont-weight: 700;\nbackground-color: #fff;\nborder: 2px solid grey;\nmargin-top: 10px;\nmargin-bottom: 30px;\nwidth: 130px;\ncursor: pointer;\n\npadding: 5px 15px;\ntext-align: center;\n&:hover {\n    color: blue;\n}\n`;\n\nexport const FormSt = styled.form`\nborder: 2px solid grey;\n  width: 300px;\n  height: 150px;\n  padding: 10px;\n\n`;","import { LabelName, Search, BtnContact, FormSt } from './ContactForm.styled';\nimport { useState } from 'react';\nimport shortid from 'shortid';\n\nfunction ContactForm({ onSubmit }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  // const [id, setId] = useState('');\n\n  //метод, который будет обновлять состояние input\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  //метод для отправки form\n  const handleSubmit = e => {\n    //функция, чтобы старница не перезагружалась при submit\n    e.preventDefault();\n\n    //передаем props Компонента ContactForm (ребенка) в Компонент App (родитель)\n    const addNewContact = {\n      // id: shortid.generate(),\n      //короткая запись свойств объекта\n      name,\n      number,\n      id: shortid.generate(),\n    };\n\n    onSubmit(addNewContact);\n    //после submit сбрасываем все поля input\n    reset();\n  };\n\n  //метод, который сбрасывает все поля input\n  const reset = () => {\n    // setId('');\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <FormSt onSubmit={handleSubmit}>\n      <LabelName>\n        {' '}\n        Name\n        <Search\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </LabelName>\n      <LabelName>\n        Number\n        <Search\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={handleChange}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n      </LabelName>\n      <BtnContact type=\"submit\">Add contact</BtnContact>\n    </FormSt>\n  );\n}\n\nexport default ContactForm;\n\n// ////////////////////классовый Компонент\n// import React, { Component } from 'react';\n// import { LabelName, Search, BtnContact, FormSt } from './ContactForm.styled';\n\n// class ContactForm extends Component {\n//   state = {\n//     name: '',\n//     number: '',\n//   };\n\n//   //метод, который будет обновлять состояние input\n//   handleChange = e => {\n//     const { name, value } = e.currentTarget;\n//     this.setState({\n//       [name]: value,\n//     });\n//   };\n\n//   //метод для отправки form\n//   handleSubmit = e => {\n//     //функция, чтобы старница не перезагружалась при submit\n//     e.preventDefault();\n\n//     //передаем props Компонента ContactForm (ребенка) в Компонент App (родитель)\n//     this.props.addNewContact(this.state);\n//     //после submit сбрасываем все поля input\n//     this.reset();\n//   };\n\n//   //метод, который сбрасывает все поля input\n//   reset = () => {\n//     this.setState({\n//       id: '',\n//       name: '',\n//       number: '',\n//     });\n//   };\n\n//   render() {\n//     return (\n//       <FormSt onSubmit={this.handleSubmit}>\n//         <LabelName>\n//           {' '}\n//           Name\n//           <Search\n//             type=\"text\"\n//             name=\"name\"\n//             value={this.state.name}\n//             onChange={this.handleChange}\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//             title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n//             required\n//           />\n//         </LabelName>\n//         <LabelName>\n//           Number\n//           <Search\n//             type=\"tel\"\n//             name=\"number\"\n//             value={this.state.number}\n//             onChange={this.handleChange}\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//             title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n//             required\n//           />\n//         </LabelName>\n//         <BtnContact type=\"submit\">Add contact</BtnContact>\n//       </FormSt>\n//     );\n//   }\n// }\n\n// export default ContactForm;\n","import styled from '@emotion/styled';\n\nexport const ContactItem = styled.li`\nfont-size: 15px;\ndisplay: flex;\nmargin: 20px 20px;\n\n`;\n\nexport const BtnDelete = styled.button`\nmargin-left: 10px;\ncursor: pointer;\nbackground-color: #fff;\nborder: 1px solid grey;\n`;","import React from 'react';\nimport { ContactItem, BtnDelete } from './ContactList.styled';\nimport PropTypes from 'prop-types';\nimport shortid from 'shortid';\n\nfunction ContactList({ contacts, deleteContact }) {\n  return (\n    <ul>\n      {contacts.map(({ name, number, id }) => (\n        <ContactItem key={shortid.generate()}>\n          <p>\n            {name}: {number}\n          </p>\n          <BtnDelete type=\"button\" onClick={() => deleteContact(id)}>\n            Delete\n          </BtnDelete>\n        </ContactItem>\n      ))}\n    </ul>\n  );\n}\n\nContactList.defaultProps = {\n  id: null,\n};\n\nContactList.propTypes = {\n  title: PropTypes.string.isRequired,\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n      id: PropTypes.string,\n    }),\n  ),\n  deleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactList;\n\n// ////////////\n// import React from 'react';\n// import { ContactItem, BtnDelete } from './ContactList.styled';\n// import PropTypes from 'prop-types';\n\n// function ContactList({ title, contacts, deleteContact }) {\n//   return (\n//     <ul>\n//       {contacts.map(({ name, number, id }) => (\n//         <ContactItem key={id}>\n//           <p>\n//             {name}: {number}\n//           </p>\n//           <BtnDelete type=\"button\" onClick={() => deleteContact(id)}>\n//             Delete\n//           </BtnDelete>\n//         </ContactItem>\n//       ))}\n//     </ul>\n//   );\n// }\n\n// ContactList.propTypes = {\n//   title: PropTypes.string.isRequired,\n//   contacts: PropTypes.arrayOf(\n//     PropTypes.shape({\n//       name: PropTypes.string.isRequired,\n//       number: PropTypes.string.isRequired,\n//       id: PropTypes.string.isRequired,\n//     }),\n//   ),\n//   deleteContact: PropTypes.func.isRequired,\n// };\n\n// export default ContactList;\n","import styled from '@emotion/styled';\n\nexport const FilteredName = styled.label`\ndisplay: inline-block;\nmargin-right: 20px;\nmargin-top: 20px;\n`;\nexport const FilteredInput= styled.input`\ndisplay: flex;\nmargin-right: 20px;\nmargin-top: 10px;\n`;","import React from 'react';\nimport { FilteredName, FilteredInput } from './Filter.styled';\nimport PropTypes from 'prop-types';\n\nfunction Filter({ value, filteredValue }) {\n  return (\n    <>\n      <form>\n        <FilteredName>\n          {' '}\n          Find contacts by name\n          <FilteredInput\n            type=\"text\"\n            name=\"filter\"\n            value={value}\n            onChange={filteredValue}\n          />\n        </FilteredName>\n      </form>\n    </>\n  );\n}\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  filteredValue: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import { useState, useEffect } from 'react';\n\nimport { ContactTitle } from './App.styled';\n\nimport Container from './components/Container/Container';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport ContactList from './components/ContactList/ContactList';\nimport Filter from './components/Filter/Filter';\n\nconst contactsArray = [\n  { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n  { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n  { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n  { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n];\n\nfunction App() {\n  const [filter, setFilter] = useState('');\n  const [contacts, setContacts] = useState(() => {\n    return JSON.parse(localStorage.getItem('contacts')) ?? contactsArray;\n  });\n\n  useEffect(() => {\n    window.localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  //метод добавления нового контакта\n  const handleSubmitForm = data => {\n    //проверка на дублируемый номер телефона\n    if (\n      contacts.some(contact =>\n        contact.name.toLowerCase().includes(data.name.toLowerCase()),\n      )\n    ) {\n      return alert(`${data.name} is already in contacts`);\n    }\n    setContacts([data, ...contacts]);\n  };\n\n  //метод для удаления контакта\n  const onDeleteContact = id => {\n    setContacts([...contacts.filter(contact => contact.id !== id)]);\n  };\n\n  //метод-фильтр (прослушивание input)\n  const handleFilteredInput = e => {\n    setFilter(e.target.value);\n  };\n\n  //метод для фильтра контактов\n  const onFilteredContacts = () => {\n    //приводим текс к нижнему регистру и удаляем пробелы по бокам\n    const normalizedFilter = filter.toLowerCase().trim();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().trim().includes(normalizedFilter),\n    );\n  };\n\n  return (\n    <Container title=\"Phonebook\">\n      <ContactForm onSubmit={handleSubmitForm} />\n      <ContactTitle>Contacts</ContactTitle>\n      <Filter value={filter} filteredValue={handleFilteredInput} />\n      <ContactList\n        title=\"Contacts\"\n        deleteContact={onDeleteContact}\n        contacts={onFilteredContacts()}\n      ></ContactList>\n    </Container>\n  );\n}\n\nexport default App;\n\n// ////////////////////классовый Компонент\n// import React, { Component } from 'react';\n// import shortid from 'shortid';\n\n// import { ContactTitle } from './App.styled';\n\n// import Container from './components/Container/Container';\n// import ContactForm from './components/ContactForm/ContactForm';\n// import ContactList from './components/ContactList/ContactList';\n// import Filter from './components/Filter/Filter';\n\n// class App extends Component {\n//   state = {\n//     contacts: [\n//       { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n//       { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n//       { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n//       { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n//     ],\n//     // contacts: [],\n//     filter: '',\n//     name: '',\n//     number: '',\n//   };\n\n//   //метод добавления нового контакта\n//   handleSubmitForm = ({ name, number }) => {\n//     const addNewContact = {\n//       id: shortid.generate(),\n//       //короткая запись свойств объекта\n//       name,\n//       number,\n//     };\n\n//     //проверка на дублируемый номер телефона\n//     this.state.contacts.some(\n//       contact =>\n//         contact.name.toLowerCase() === addNewContact.name.toLowerCase(),\n//     )\n//       ? alert(`${name} is already in contacts`)\n//       : this.setState(prevState => ({\n//           contacts: [addNewContact, ...prevState.contacts],\n//         }));\n//   };\n\n//   // componentDidMount = () => {\n//   //   const contacts = JSON.parse(localStorage.getItem('contacts'));\n//   //   if (contacts !== null) {\n//   //     this.setState({\n//   //       contacts,\n//   //     });\n//   //   }\n//   // };\n\n//   //метод забирает данные из локального хранилища\n//   componentDidMount() {\n//     const contacts = localStorage.getItem('contacts');\n//     const parsedContacts = JSON.parse(contacts);\n\n//     if (parsedContacts) {\n//       this.setState({ contacts: parsedContacts });\n//     }\n//   }\n\n//   //метод забирает данные из локального хранилища\n//   componentDidUpdate(prevProps, prevState) {\n//     const nextContacts = this.state.contacts;\n//     const prevContacts = prevState.contacts;\n//     //проверка: если предыдущие контакты не равны следующим контактам, тогда записываем контакты в локальное хранилище\n//     if (nextContacts !== prevContacts) {\n//       localStorage.setItem('contacts', JSON.stringify(nextContacts));\n//     }\n//   }\n\n//   // componentDidUpdate = (prevProps, prevState) => {\n//   //   localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n//   // };\n\n//   //метод для удаления контакта\n//   onDeleteContact = id => {\n//     this.setState(prevState => ({\n//       contacts: prevState.contacts.filter(contact => contact.id !== id),\n//     }));\n//   };\n\n//   //метод-фильтр (прослушивание input)\n//   handleFilteredInput = e => {\n//     this.setState({\n//       filter: e.target.value,\n//     });\n//   };\n\n//   //метод для фильтра контактов\n//   onFilteredContacts = () => {\n//     const { filter, contacts } = this.state;\n//     //приводим текс к нижнему регистру и удаляем пробелы по бокам\n//     const normalizedFilter = filter.toLowerCase().trim();\n//     return contacts.filter(contact =>\n//       contact.name.toLowerCase().trim().includes(normalizedFilter),\n//     );\n//   };\n\n//   render() {\n//     //деструктуризация\n//     const { filter } = this.state;\n\n//     return (\n//       <Container title=\"Phonebook\">\n//         <ContactForm addNewContact={this.handleSubmitForm} />\n//         <ContactTitle>Contacts</ContactTitle>\n//         <Filter value={filter} filteredValue={this.handleFilteredInput} />\n//         <ContactList\n//           title=\"Contacts\"\n//           deleteContact={this.onDeleteContact}\n//           contacts={this.onFilteredContacts()}\n//         ></ContactList>\n//       </Container>\n//     );\n//   }\n// }\n\n// export default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}